stages:
  - docker_build
  - build
  - test
  - deploy

# ---------------- DOCKER BUILD & PUSH ----------------
docker_build:
  stage: docker_build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script: |
    echo "Building custom Liquibase+psql Docker image..."
    docker build -t $CI_REGISTRY_IMAGE/liquibase-psql:latest .
    echo "Pushing image to GitLab registry..."
    docker push $CI_REGISTRY_IMAGE/liquibase-psql:latest
  only:
    refs:
      - main

# ---------------- BUILD STAGE ----------------
build_job:
  stage: build
  image: $CI_REGISTRY_IMAGE/liquibase-psql:latest
  services:
    - name: postgres:15
      alias: db
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: postgres
  script: |
    echo "===== BUILD: validate changelog (Liquibase) ====="
    for i in $(seq 1 20); do
      liquibase --url="jdbc:postgresql://db:5432/$POSTGRES_DB" --username=$POSTGRES_USER --password=$POSTGRES_PASSWORD --changeLogFile=changelog.xml status && break || (echo "Waiting for DB to be ready ($i)"; sleep 2)
    done
    echo "Running liquibase validate..."
    liquibase --url="jdbc:postgresql://db:5432/$POSTGRES_DB" --username=$POSTGRES_USER --password=$POSTGRES_PASSWORD --changeLogFile=changelog.xml validate
  artifacts:
    paths:
      - build_log.txt
    expire_in: 1 week
  only:
    refs:
      - main

# ---------------- TEST STAGE ----------------
test_job:
  stage: test
  image: $CI_REGISTRY_IMAGE/liquibase-psql:latest
  services:
    - name: postgres:15
      alias: db
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  before_script: |
    export PGPASSWORD=$POSTGRES_PASSWORD
  script: |
    echo "===== TEST: Prepare DBs and apply SQL files =====" | tee test_log.txt

    # Create test database if missing
    exists=$(psql -h db -U $POSTGRES_USER -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='testdb';")
    if [ "$exists" != "1" ]; then
      echo "Creating testdb..." | tee -a test_log.txt
      psql -h db -U $POSTGRES_USER -d postgres -c "CREATE DATABASE testdb;" | tee -a test_log.txt
    fi

    # Apply DEPARTMENT.sql first
    echo "Applying DEPARTMENT.sql..." | tee -a test_log.txt
    psql -h db -U $POSTGRES_USER -d testdb -f DEPARTMENT.sql | tee -a test_log.txt

    # Apply EMPLOYEE.sql next
    echo "Applying EMPLOYEE.sql..." | tee -a test_log.txt
    psql -h db -U $POSTGRES_USER -d testdb -f EMPLOYEE.sql | tee -a test_log.txt

    echo "===== Verifying data integrity =====" | tee -a test_log.txt

    # Verify DEPARTMENT count
    deptCount=$(psql -h db -U $POSTGRES_USER -d testdb -t -c "SELECT COUNT(*) FROM department;" | xargs)
    echo "department count: $deptCount" | tee -a test_log.txt
    if [ "$deptCount" -ne 12 ]; then
      echo "ERROR: Expected 12 departments, got $deptCount" | tee -a test_log.txt
      exit 1
    fi

    # Verify EMPLOYEE count
    empCount=$(psql -h db -U $POSTGRES_USER -d testdb -t -c "SELECT COUNT(*) FROM employee;" | xargs)
    echo "employee count: $empCount" | tee -a test_log.txt
    if [ "$empCount" -ne 12 ]; then
      echo "ERROR: Expected 12 employees, got $empCount" | tee -a test_log.txt
      exit 1
    fi

    # Verify foreign keys: all employees have valid department
    orphanCount=$(psql -h db -U $POSTGRES_USER -d testdb -t -c "SELECT COUNT(*) FROM employee e LEFT JOIN department d ON e.dept_id=d.dept_id WHERE d.dept_id IS NULL;" | xargs)
    echo "orphan employees count: $orphanCount" | tee -a test_log.txt
    if [ "$orphanCount" -ne 0 ]; then
      echo "ERROR: $orphanCount employees have invalid dept_id" | tee -a test_log.txt
      exit 1
    fi

    # Verify salary > 0
    salaryBad=$(psql -h db -U $POSTGRES_USER -d testdb -t -c "SELECT COUNT(*) FROM employee WHERE salary <= 0 OR salary IS NULL;" | xargs)
    echo "invalid salary rows: $salaryBad" | tee -a test_log.txt
    if [ "$salaryBad" -ne 0 ]; then
      echo "ERROR: $salaryBad employees have invalid salary" | tee -a test_log.txt
      exit 1
    fi

    echo "All tests passed successfully." | tee -a test_log.txt
  artifacts:
    paths:
      - test_log.txt
    expire_in: 1 week
  only:
    refs:
      - main

# ---------------- DEPLOY TO UAT (simulated) ----------------
deploy_uat:
  stage: deploy
  image: $CI_REGISTRY_IMAGE/liquibase-psql:latest
  services:
    - name: postgres:15
      alias: db
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  before_script: |
    export PGPASSWORD=$POSTGRES_PASSWORD
  script: |
    echo "===== DEPLOY UAT (simulated) ====="
    exists=$(psql -h db -U $POSTGRES_USER -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='uatdb';")
    if [ "$exists" != "1" ]; then
      psql -h db -U $POSTGRES_USER -d postgres -c "CREATE DATABASE uatdb;"
    fi
    echo "Applying changelog to uatdb (simulated UAT)..."
    liquibase --url="jdbc:postgresql://db:5432/uatdb" --username=$POSTGRES_USER --password=$POSTGRES_PASSWORD --changeLogFile=changelog.xml update
    echo "UAT deploy complete."
  when: manual
  environment:
    name: uat
  only:
    refs:
      - main

# ---------------- DEPLOY TO PROD (simulated) ----------------
deploy_prod:
  stage: deploy
  image: $CI_REGISTRY_IMAGE/liquibase-psql:latest
  services:
    - name: postgres:15
      alias: db
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  before_script: |
    export PGPASSWORD=$POSTGRES_PASSWORD
  script: |
    echo "===== DEPLOY PROD (simulated) ====="
    exists=$(psql -h db -U $POSTGRES_USER -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='proddb';")
    if [ "$exists" != "1" ]; then
      psql -h db -U $POSTGRES_USER -d postgres -c "CREATE DATABASE proddb;"
    fi
    echo "Applying changelog to proddb (simulated PROD)..."
    liquibase --url="jdbc:postgresql://db:5432/proddb" --username=$POSTGRES_USER --password=$POSTGRES_PASSWORD --changeLogFile=changelog.xml update
    echo "PROD deploy complete."
  when: manual
  environment:
    name: production
  only:
    refs:
      - main
