name: CI/CD Pipeline Test (Safe Mode, Colorized)

permissions:
  contents: read
  packages: write

env:
  repo_lower: ${{ github.repository }}
  IMAGE_NAME: liquibase-psql
  IMAGE_TAG: latest
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: postgres
  DOCKER_NETWORK: ci_network

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  DOCKER_BUILD:
    name: Docker Build & Push (Test)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test step
        run: |
          echo -e "\033[1;34m==== DOCKER_BUILD JOB TRIGGERED ====\033[0m"
          echo -e "\033[1;32mSimulating Docker build & push... (no real action)\033[0m"

  BUILD_JOB:
    name: Build & Validate Changelog (Test)
    runs-on: ubuntu-latest
    needs: DOCKER_BUILD
    steps:
      - uses: actions/checkout@v3
      - name: Test step
        run: |
          echo -e "\033[1;34m==== BUILD_JOB TRIGGERED ====\033[0m"
          echo -e "\033[1;32mSimulating Postgres setup and Liquibase validate... (no real action)\033[0m"

  MANUAL_BACKUP:
    name: Save Repo Backup (Test)
    runs-on: ubuntu-latest
    needs: BUILD_JOB
    steps:
      - uses: actions/checkout@v3
      - name: Test step
        run: |
          echo -e "\033[1;34m==== MANUAL_BACKUP JOB TRIGGERED ====\033[0m"
          echo -e "\033[1;32mSimulating repo backup... (no real action)\033[0m"

  DB_CLONE:
    name: Clone Master DB (Test)
    runs-on: ubuntu-latest
    needs: MANUAL_BACKUP
    steps:
      - uses: actions/checkout@v3
      - name: Test step
        run: |
          echo -e "\033[1;34m==== DB_CLONE JOB TRIGGERED ====\033[0m"
          echo -e "\033[1;32mSimulating DB clone & Liquibase/SQL apply... (no real action)\033[0m"

  TEST_JOB:
    name: Static Analysis & SQL Tests (Test)
    runs-on: ubuntu-latest
    needs: DB_CLONE
    steps:
      - uses: actions/checkout@v3
      - name: Test step
        run: |
          echo -e "\033[1;34m==== TEST_JOB TRIGGERED ====\033[0m"
          echo -e "\033[1;32mSimulating SQL static checks... (no real action)\033[0m"

  DEPLOY_UAT:
    name: Deploy to UAT (manual, Test)
    runs-on: ubuntu-latest
    needs: TEST_JOB
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Test step
        run: |
          echo -e "\033[1;34m==== DEPLOY_UAT JOB TRIGGERED ====\033[0m"
          echo -e "\033[1;32mSimulating UAT deployment... (no real action)\033[0m"

  DEPLOY_PROD:
    name: Deploy to Prod (manual, Test)
    runs-on: ubuntu-latest
    needs: TEST_JOB
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Test step
        run: |
          echo -e "\033[1;34m==== DEPLOY_PROD JOB TRIGGERED ====\033[0m"
          echo -e "\033[1;32mSimulating PROD deployment... (no real action)\033[0m"

  ROLLBACK_CLONE:
    name: Rollback if tests failed (Test)
    runs-on: ubuntu-latest
    needs: [MANUAL_BACKUP, TEST_JOB]
    if: failure() || success()
    steps:
      - uses: actions/checkout@v3
      - name: Test step
        run: |
          echo -e "\033[1;34m==== ROLLBACK_CLONE JOB TRIGGERED ====\033[0m"
          echo -e "\033[1;32mSimulating repo restore... (no real action)\033[0m"
