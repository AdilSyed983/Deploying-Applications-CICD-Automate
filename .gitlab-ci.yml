stages:
  - docker_build
  - build
  - clone
  - test
  - deploy
  - cleanup

# ---------------- DOCKER BUILD & PUSH ----------------
docker_build:
  stage: docker_build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script: |
    echo "Building custom Liquibase+psql Docker image..."
    docker build -t $CI_REGISTRY_IMAGE/liquibase-psql:latest .
    echo "Pushing image to GitLab registry..."
    docker push $CI_REGISTRY_IMAGE/liquibase-psql:latest
  only:
    refs:
      - main

# ---------------- BUILD STAGE ----------------
build_job:
  stage: build
  image: $CI_REGISTRY_IMAGE/liquibase-psql:latest
  services:
    - name: postgres:15
      alias: db
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: postgres
  script: |
    echo "===== BUILD: validate changelog (Liquibase) ====="
    for i in $(seq 1 20); do
      liquibase --url="jdbc:postgresql://db:5432/$POSTGRES_DB" \
                --username=$POSTGRES_USER \
                --password=$POSTGRES_PASSWORD \
                --changeLogFile=changelog.xml status \
      && break || (echo "Waiting for DB to be ready ($i)"; sleep 2)
    done
    echo "Running liquibase validate..."
    liquibase --url="jdbc:postgresql://db:5432/$POSTGRES_DB" \
              --username=$POSTGRES_USER \
              --password=$POSTGRES_PASSWORD \
              --changeLogFile=changelog.xml validate
  artifacts:
    paths:
      - build_log.txt
    expire_in: 1 week
  only:
    refs:
      - main

# ---------------- CREATE TEMP CLONE DB ----------------
db_clone:
  stage: clone
  image: postgres:15
  services:
    - name: postgres:15
      alias: db
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    PGPASSWORD: $POSTGRES_PASSWORD
  script: |
    DBNAME="clone_${CI_COMMIT_SHORT_SHA}"
    echo "DBNAME=$DBNAME" >> clone.env

    echo "Creating temp DB: $DBNAME"
    psql -h db -U $POSTGRES_USER -d postgres -c "DROP DATABASE IF EXISTS $DBNAME;"
    psql -h db -U $POSTGRES_USER -d postgres -c "CREATE DATABASE $DBNAME;"

    echo "Applying base schema & seed data from repo..."
    for f in sql/*.sql; do
      echo "Applying $f"
      psql -h db -U $POSTGRES_USER -d $DBNAME -f $f
    done
    echo "✅ Temp DB ready: $DBNAME"
  artifacts:
    reports:
      dotenv: clone.env
  only:
    refs:
      - main

# ---------------- TEST JOB ----------------
test_job:
  stage: test
  image: $CI_REGISTRY_IMAGE/liquibase-psql:latest
  services:
    - name: postgres:15
      alias: db
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  before_script: |
    export PGPASSWORD=$POSTGRES_PASSWORD
    source clone.env
  script: |
    echo "===== TEST: running on clone DB $DBNAME =====" | tee test_log.txt

    echo "Applying changelog to $DBNAME..." | tee -a test_log.txt
    liquibase --url="jdbc:postgresql://db:5432/$DBNAME" \
              --username=$POSTGRES_USER \
              --password=$POSTGRES_PASSWORD \
              --changeLogFile=changelog.xml update | tee -a test_log.txt

    # (your validations stay exactly the same, just using $DBNAME instead of testdb)
    deptCount=$(psql -h db -U $POSTGRES_USER -d $DBNAME -t -c "SELECT COUNT(*) FROM department;" | xargs)
    echo "department count: $deptCount" | tee -a test_log.txt
    if [ "$deptCount" -ne 12 ]; then
      echo "ERROR: expected 12 departments but got $deptCount" | tee -a test_log.txt
      exit 1
    fi

    empCount=$(psql -h db -U $POSTGRES_USER -d $DBNAME -t -c "SELECT COUNT(*) FROM employee;" | xargs)
    echo "employee count: $empCount" | tee -a test_log.txt
    if [ "$empCount" -ne 12 ]; then
      echo "ERROR: expected 12 employees but got $empCount" | tee -a test_log.txt
      exit 1
    fi

    echo "✅ All tests passed on $DBNAME" | tee -a test_log.txt
  artifacts:
    paths:
      - test_log.txt
    expire_in: 1 week
  only:
    refs:
      - main

# ---------------- DEPLOY TO UAT (simulated) ----------------
deploy_uat:
  stage: deploy
  image: $CI_REGISTRY_IMAGE/liquibase-psql:latest
  services:
    - name: postgres:15
      alias: db
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  before_script: |
    export PGPASSWORD=$POSTGRES_PASSWORD
  script: |
    echo "===== DEPLOY UAT (simulated) ====="
    exists=$(psql -h db -U $POSTGRES_USER -d postgres -tAc \
      "SELECT 1 FROM pg_database WHERE datname='uatdb';")
    if [ "$exists" != "1" ]; then
      psql -h db -U $POSTGRES_USER -d postgres -c "CREATE DATABASE uatdb;"
    fi
    echo "Applying changelog to uatdb (simulated UAT)..."
    liquibase --url="jdbc:postgresql://db:5432/uatdb" \
              --username=$POSTGRES_USER \
              --password=$POSTGRES_PASSWORD \
              --changeLogFile=changelog.xml update
    echo "UAT deploy complete."
  when: manual
  environment:
    name: uat
  only:
    refs:
      - main

# ---------------- DEPLOY TO PROD (simulated) ----------------
deploy_prod:
  stage: deploy
  image: $CI_REGISTRY_IMAGE/liquibase-psql:latest
  services:
    - name: postgres:15
      alias: db
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  before_script: |
    export PGPASSWORD=$POSTGRES_PASSWORD
  script: |
    echo "===== DEPLOY PROD (simulated) ====="
    exists=$(psql -h db -U $POSTGRES_USER -d postgres -tAc \
      "SELECT 1 FROM pg_database WHERE datname='proddb';")
    if [ "$exists" != "1" ]; then
      psql -h db -U $POSTGRES_USER -d postgres -c "CREATE DATABASE proddb;"
    fi
    echo "Applying changelog to proddb (simulated PROD)..."
    liquibase --url="jdbc:postgresql://db:5432/proddb" \
              --username=$POSTGRES_USER \
              --password=$POSTGRES_PASSWORD \
              --changeLogFile=changelog.xml update
    echo "PROD deploy complete."
  when: manual
  environment:
    name: production
  only:
    refs:
      - main

# ---------------- CLEANUP ON FAILURE ----------------
rollback_clone:
  stage: cleanup
  image: postgres:15
  services:
    - name: postgres:15
      alias: db
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    PGPASSWORD: $POSTGRES_PASSWORD
  script: |
    source clone.env || true
    if [ -n "$DBNAME" ]; then
      echo "Dropping temp DB $DBNAME"
      psql -h db -U $POSTGRES_USER -d postgres -c "DROP DATABASE IF EXISTS $DBNAME;"
    fi
  when: on_failure
  only:
    refs:
      - main
