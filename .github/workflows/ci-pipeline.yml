name: CI/CD Pipeline (YAML + SQL + Liquibase)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:  # manual trigger

jobs:
  DOCKER_BUILD:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    container:
      image: docker:24.0.5
      options: --privileged
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Docker login
        run: |
          echo "${{ secrets.CI_REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.CI_REGISTRY_USER }}" --password-stdin ${{ secrets.CI_REGISTRY }}

      - name: Build & Push Docker image
        run: |
          echo "Building Liquibase+psql image..."
          docker build -t ${{ secrets.CI_REGISTRY_IMAGE }}/liquibase-psql:latest .
          echo "Pushing image..."
          docker push ${{ secrets.CI_REGISTRY_IMAGE }}/liquibase-psql:latest

  BUILD_JOB:
    name: Build & Validate Changelog
    runs-on: ubuntu-latest
    needs: DOCKER_BUILD
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    container:
      image: ${{ secrets.CI_REGISTRY_IMAGE }}/liquibase-psql:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for Postgres
        run: |
          for i in $(seq 1 30); do
            pg_isready -h localhost -p 5432 -U postgres && break || (echo "Waiting for DB ($i)"; sleep 2)
          done

      - name: Liquibase validate
        run: |
          liquibase --url="jdbc:postgresql://localhost:5432/postgres" \
                    --username=postgres \
                    --password=postgres \
                    --changeLogFile=changelog.xml validate

      - name: Upload build log
        run: echo "Build done" > build_log.txt
      - uses: actions/upload-artifact@v4
        with:
          name: build_log
          path: build_log.txt

  MANUAL_BACKUP:
    name: Save Repo Backup
    runs-on: ubuntu-latest
    needs: BUILD_JOB
    steps:
      - uses: actions/checkout@v4
      - name: Backup files
        run: |
          mkdir backup_state
          rsync -av --progress ./ ./backup_state --exclude backup_state
      - uses: actions/upload-artifact@v4
        with:
          name: backup_state
          path: backup_state/

  DB_CLONE:
    name: Clone Master DB
    runs-on: ubuntu-latest
    needs: MANUAL_BACKUP
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    container:
      image: ${{ secrets.CI_REGISTRY_IMAGE }}/liquibase-psql:latest
    steps:
      - uses: actions/checkout@v4
      - name: Wait for Postgres
        run: |
          for i in $(seq 1 30); do
            pg_isready -h localhost -p 5432 -U postgres && break || (echo "Waiting DB ($i)"; sleep 2)
          done
      - name: Create temp DB & apply schema
        run: |
          DBNAME="clone_${GITHUB_SHA::8}"
          psql -h localhost -U postgres -d postgres -c "DROP DATABASE IF EXISTS \"$DBNAME\";"
          psql -h localhost -U postgres -d postgres -c "CREATE DATABASE \"$DBNAME\";"
          if [ -f changelog.xml ]; then
            liquibase --url="jdbc:postgresql://localhost:5432/$DBNAME" \
                      --username=postgres \
                      --password=postgres \
                      --changeLogFile=changelog.xml update
          else
            for f in $(find sql -type f -name "*.sql" | sort); do
              psql -v ON_ERROR_STOP=1 -h localhost -U postgres -d "$DBNAME" -f "$f"
            done
          fi
          pg_dump -h localhost -U postgres -d "$DBNAME" -Fc -f clone.dump
          echo "DBNAME=$DBNAME" >> clone.env
      - uses: actions/upload-artifact@v4
        with:
          name: clone_db
          path: clone.dump

  TEST_JOB:
    name: Static Analysis & SQL Tests
    runs-on: ubuntu-latest
    needs: DB_CLONE
    steps:
      - uses: actions/checkout@v4
      - name: Run SQL static checks
        run: |
          # Employees.sql check
          if grep -i "insert" Employees.sql | awk -F'[(), ]+' '{for(i=1;i<=NF;i++) if(tolower($i)=="values"){print $(i+4)}}' | awk '{if($1<10000){echo "Fail"; exit 1}}'; then
            echo "Employees check passed"
          fi
          # Department.sql duplicates
          if grep -i "insert" Department.sql | awk -F'[(), ]+' '{for(i=1;i<=NF;i++) if(tolower($i)=="values"){print $(i+1)}}' | sort | uniq -d | grep .; then
            echo "Duplicate DEPT_ID found"; exit 1
          fi

  DEPLOY_UAT:
    name: Deploy to UAT (manual)
    runs-on: ubuntu-latest
    needs: TEST_JOB
    environment:
      name: uat
      url: https://uat.example.com
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Simulate UAT deploy
        run: echo "Deploy to UAT done"

  DEPLOY_PROD:
    name: Deploy to Prod (manual)
    runs-on: ubuntu-latest
    needs: TEST_JOB
    environment:
      name: production
      url: https://prod.example.com
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Simulate PROD deploy
        run: echo "Deploy to PROD done"

  ROLLBACK_CLONE:
    name: Rollback if tests failed
    runs-on: ubuntu-latest
    needs: [MANUAL_BACKUP, TEST_JOB]
    if: failure()
    steps:
      - uses: actions/checkout@v4
      - name: Restore repo files
        run: |
          echo "Restoring repo from backup..."
          rsync -av --progress backup_state/ ./ --exclude backup_state
