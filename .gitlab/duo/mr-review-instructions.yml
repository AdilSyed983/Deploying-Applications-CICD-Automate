instructions:
  - name: SQL & Database Review
    fileFilters:
      - "*.sql"
    instructions: |
      Review database scripts with a focus on safety, performance, and sensitive data exposure:
        - Critical: Invalid syntax, destructive DDL without safeguards (DROP/TRUNCATE), unsafe DELETE/UPDATE without WHERE.
        - Critical: Hardcoded credentials (usernames, passwords) or connection strings in scripts.
        - Warning: Missing primary/foreign keys, no rollback strategy in migration scripts.
        - Medium: Inefficient joins, no indexing for large tables, SELECT * usage.
        - Suggestion: Improve formatting, use consistent naming conventions, add comments.
      Additional Checks:
        - Ensure transactions are used for multi-step operations.
        - Verify data integrity and referential constraints.
        - Check for idempotency (scripts can safely run multiple times).

  - name: PL/SQL Code Review
    fileFilters:
      - "*.pls"
      - "*.pks"
      - "*.pkb"
      - "*.plsql"
    instructions: |
      Focus on maintainability, performance, security, and sensitive data handling:
        - Critical: Compilation errors, SQL injection risk, missing exception handling.
        - Critical: Hardcoded passwords, API keys, tokens, or sensitive variables.
        - Warning: Poor modularization, unhandled edge cases.
        - Medium: Inefficient loops, lack of bulk operations, ambiguous variable names.
        - Suggestion: Add documentation, improve readability.
      Additional Checks:
        - Validate BEGIN/END and transaction handling.
        - Recommend explicit cursor management.
        - Enforce coding standards (naming, structure).

  - name: CI/CD Pipeline Review
    fileFilters:
      - ".gitlab-ci.yml"
      - ".gitlab/ci/*.yml"
    instructions: |
      Review pipeline definitions for safety, efficiency, and secrets management:
        - Critical: Invalid YAML syntax, credentials in plain text, incorrect deployment targets.
        - Critical: Hardcoded secrets, tokens, or sensitive env variables not using CI/CD secrets store.
        - Warning: Missing environment separation, no rollback or retry strategies.
        - Medium: Inefficient caching, redundant jobs, missing parallelization.
        - Suggestion: Improve readability, naming, and comments.
      Additional Checks:
        - Verify approval gates for production deployments.
        - Ensure secrets are masked and managed via CI/CD variables.
        - Recommend pipeline optimizations.

  - name: Dockerfile & Container Review
    fileFilters:
      - "Dockerfile"
    instructions: |
      Review container setup for security, performance, and sensitive data leaks:
        - Critical: Insecure base images, no user permissions, secrets in layers or ENV.
        - Warning: Missing pinned versions, large unoptimized images, excessive RUN commands.
        - Medium: Inefficient caching, lack of multi-stage builds.
        - Suggestion: Improve documentation, add HEALTHCHECK instructions.
      Additional Checks:
        - Validate best practices (COPY vs ADD, minimal layers).
        - Ensure reproducibility and immutability.

  - name: General & Cross-Cutting Concerns
    fileFilters:
      - "*.xml"
    instructions: |
      For all files, review changes in context:
        - Critical: Breaking changes, security vulnerabilities, missing validations.
        - Critical: Hardcoded sensitive values (passwords, tokens, keys) in XML or config files.
        - Warning: Logic errors, no unit tests, non-performant code paths.
        - Medium: Maintainability issues, unclear comments, missing docs.
        - Suggestion: Style improvements, naming conventions, code readability.
      Additional Checks:
        - Ensure meaningful commit messages referencing issues/tickets.
        - Verify test coverage for major changes.
        - Highlight architectural impact if relevant.